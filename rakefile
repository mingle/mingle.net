require 'rspec/core/rake_task'

apisln = 'StudiosApi.sln'
cfg = ENV["CONFIG"]
dotnet = ENV["DOTNETPATH"]
vspath = ENV["VSPATH"]
tfsTestContainer = './TfsSynchronizer/build/tests/TestSynchronizer.dll'
tfsTestSettings = './TfsSynchronizer/Local.testsettings'

task :build => [:clean, :compile, :spec, :installer]

task :compile do
	puts "Building '#{apisln}' using '#{cfg}' configuration."
	sh "msbuild.exe /t:Rebuild /p:configuration=#{cfg} #{apisln}" 
end

task :clean do
	clean 'build'
	sh "devenv.exe #{apisln} /Clean "
end

task :doc do
	sh "msbuild.exe /p:configuration=#{cfg}  documentation.shfbproj"
end

task :installer do
	sh "devenv ApiSetup/ApiSetup.vdproj /Rebuild #{cfg} /Log StudiosApiSetupLog.txt"
end

RSpec::Core::RakeTask.new(:spec) do |t|
  t.skip_bundler = true
end

task :install do
	clean '.bundle'
	mkdir 'vendor' unless File.exists? 'vendor'
	sh 'bundle install --path vendor'
end

def clean path
	rm_r path if File.exists? path
end

task :deploy do
	sh "deploy.bat"
end

task :publish do
    sh "nuget setApiKey " + ENV["NUGETAPIKEY"]
	sh "nuget pack ./nuget/mingle.net.nuspec -BasePath ./package -Version " + ENV["MINGLENETVERSION"]
	sh "nuget push "MingleNet." + ENV["MINGLENETVERSION"]
end

